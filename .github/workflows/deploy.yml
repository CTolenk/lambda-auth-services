name: Deploy Infrastructure

on:
  workflow_call:
    inputs:
      source_code_hash_auth_login:
        required: true
        type: string
      source_code_hash_auth_register:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_REGION:
        required: true

jobs:
  import-roles:
    runs-on: ubuntu-latest
    outputs:
      TF_VAR_env: ${{ steps.set-env.outputs.tf_env }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment name
        id: set-env
        run: |
          ENV_NAME=$([[ "${GITHUB_REF_NAME}" == "main" ]] && echo "prod" || echo "stage")
          echo "tf_env=$ENV_NAME" >> "$GITHUB_OUTPUT"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure
        run: terraform init

      - name: Import IAM roles if not in state
        working-directory: infrastructure
        run: |
          for lambda in auth-login auth-register; do
            ROLE_NAME="$lambda-${{ steps.set-env.outputs.tf_env }}-role"
            RESOURCE_NAME="module.$lambda.aws_iam_role.lambda_role"
            echo "üîç Checking if $RESOURCE_NAME is in Terraform state..."
            if ! terraform state list | grep "$RESOURCE_NAME" > /dev/null; then
              echo "üì• Importing $ROLE_NAME into $RESOURCE_NAME..."
              terraform import "$RESOURCE_NAME" "$ROLE_NAME" || echo "‚ö†Ô∏è Could not import. Might not exist."
            else
              echo "‚úÖ $RESOURCE_NAME already exists in Terraform state"
            fi
          done

  apply:
    needs: import-roles
    runs-on: ubuntu-latest
    env:
      TF_VAR_env: ${{ needs.import-roles.outputs.TF_VAR_env }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure
        run: terraform init

      - name: Terraform Apply
        working-directory: infrastructure
        run: |
          terraform apply -auto-approve \
            -var-file=environments/${{ env.TF_VAR_env }}.tfvars \
            -var="source_code_hash_auth_login=${{ inputs.source_code_hash_auth_login }}" \
            -var="source_code_hash_auth_register=${{ inputs.source_code_hash_auth_register }}"