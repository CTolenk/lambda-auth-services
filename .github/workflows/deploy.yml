name: Build, Upload & Deploy Lambda

on:
  push:
    branches:
      - main
      - stage

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    env:
      NODE_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build Lambda with esbuild
        run: |
          npx esbuild src/handler.ts \
            --bundle \
            --platform=node \
            --target=node20 \
            --outfile=dist/index.js

      - name: Zip function
        run: zip -j function.zip dist/index.js

      - name: Set branch environment
        run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          if [ "$BRANCH_NAME" = "main" ]; then
            echo "TFVARS_FILE=production.tfvars" >> $GITHUB_ENV
          elif [ "$BRANCH_NAME" = "stage" ]; then
            echo "TFVARS_FILE=stage.tfvars" >> $GITHUB_ENV
          else
            echo "❌ Unsupported branch: $BRANCH_NAME"
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: |
          aws s3 cp function.zip s3://lambdas-artifacts-${{ env.BRANCH_NAME }}/auth-service/${{ env.BRANCH_NAME }}/function.zip

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        working-directory: infrastructure
        run: terraform init

      - name: Terraform Import Resources if not present
        working-directory: infrastructure
        run: |
          ROLE_NAME="auth-service-${{ env.BRANCH_NAME }}-role"
          FUNCTION_NAME="auth-service-${{ env.BRANCH_NAME }}"

          terraform state pull || echo "{}" > terraform.tfstate

          ROLE_EXISTS=$(terraform state list | grep "module.auth_lambda.aws_iam_role.lambda_role" || true)
          if [ -z "$ROLE_EXISTS" ]; then
            echo "⏳ Importing role $ROLE_NAME into Terraform state..."
            terraform import \
              -var="aws_region=${{ env.AWS_REGION }}" \
              -var="env=${{ env.BRANCH_NAME }}" \
              -var="s3_bucket=lambdas-artifacts-${{ env.BRANCH_NAME }}" \
              -var="source_code_hash=" \
              module.auth_lambda.aws_iam_role.lambda_role $ROLE_NAME || echo "⚠️ Failed to import role"
          else
            echo "✅ Role already in Terraform state, skipping import."
          fi

          FUNCTION_EXISTS=$(terraform state list | grep "module.auth_lambda.aws_lambda_function.this" || true)
          if [ -z "$FUNCTION_EXISTS" ]; then
            echo "⏳ Importing Lambda $FUNCTION_NAME into Terraform state..."
            terraform import \
              -var="aws_region=${{ env.AWS_REGION }}" \
              -var="env=${{ env.BRANCH_NAME }}" \
              -var="s3_bucket=lambdas-artifacts-${{ env.BRANCH_NAME }}" \
              -var="source_code_hash=" \
              module.auth_lambda.aws_lambda_function.this $FUNCTION_NAME || echo "⚠️ Failed to import Lambda"
          else
            echo "✅ Lambda already in Terraform state, skipping import."
          fi

      - name: Terraform Apply
        working-directory: infrastructure
        run: |
          terraform apply -auto-approve \
            -var-file=environments/${{ env.TFVARS_FILE }}
